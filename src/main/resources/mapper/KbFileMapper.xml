<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.xiaoshuyui.simplekb.mapper.KbFileMapper">

    <resultMap id="FileWithChunksResultMap" type="org.xiaoshuyui.simplekb.entity.response.FileWithChunks">
        <id column="kb_file_id" property="id"/>
        <!-- Map file name -->
        <result property="name" column="kb_file_name"/>
        <!-- Map file type name -->
        <result property="type" column="type_name"/>
        <!-- Map the number of chunks -->
        <result property="chunkCount" column="chunk_count"/>
        <!-- Map the list of chunks -->
        <collection property="chunks" ofType="java.lang.String">
            <result column="chunk_content"/>
        </collection>
    </resultMap>

    <select id="getFileWithChunks" resultMap="FileWithChunksResultMap">
        SELECT
        f.kb_file_name,f.kb_file_id,
        t.type_name,
        COUNT(c.chunk_id) AS chunk_count,
        c.chunk_content
        FROM kb_file f
        LEFT JOIN kb_file_chunk c ON f.kb_file_id = c.file_id AND c.is_deleted = 0
        LEFT JOIN kb_file_type t ON f.kb_file_type = t.type_id
        WHERE f.is_deleted = 0
        <if test="chunkIds != null and chunkIds.size() > 0">
            AND c.chunk_id IN
            <foreach item="id" collection="chunkIds" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
        GROUP BY f.kb_file_id, c.chunk_id
    </select>


    <resultMap id="ChunkWithKeywordsResultMap" type="org.xiaoshuyui.simplekb.entity.response.ChunkWithKeywords">
        <id column="content" property="content"/>
        <result column="chunkId" property="chunkId"/>
        <collection property="keywords" ofType="java.lang.String">
            <result column="keyword"/>
        </collection>
    </resultMap>

    <resultMap id="FileWithKeywordsResultMap" type="org.xiaoshuyui.simplekb.entity.response.FileWithKeywords">
        <id column="fileId" property="fileId"/>
        <result column="name" property="name"/>
        <result column="type" property="type"/>
        <collection property="chunks" ofType="org.xiaoshuyui.simplekb.entity.response.ChunkWithKeywords"
                    resultMap="ChunkWithKeywordsResultMap"/>
    </resultMap>


    <select id="getFileWithKeywordsById" resultMap="FileWithKeywordsResultMap">
        SELECT f.kb_file_id     AS fileId,
               f.kb_file_name   AS name,
               ft.type_name     AS type,
               fc.chunk_id      AS chunkId,
               fc.chunk_content AS content,
               kfck.keyword
        FROM kb_file f
                 LEFT JOIN kb_file_chunk fc ON f.kb_file_id = fc.file_id
                 LEFT JOIN kb_file_chunk_keywords kfck ON fc.chunk_id = kfck.chunk_id
                 LEFT JOIN kb_file_type ft ON f.kb_file_type = ft.type_id
        where f.kb_file_id = #{fileId}
    </select>

    <select id="getFileByTypeId" resultType="org.xiaoshuyui.simplekb.entity.KbFileChunk">
        SELECT fc.chunk_id AS id, fc.chunk_content AS content, fc.file_id as fileId
        from kb_file f
                 LEFT JOIN kb_file_chunk fc ON f.kb_file_id = fc.file_id
        where f.kb_file_type = #{typeId}
    </select>


    <resultMap id="kbFileMap" type="org.xiaoshuyui.simplekb.entity.KbFile">
        <id column="kb_file_id" property="id"/>
        <result column="kb_file_name" property="name"/>
        <result column="type" property="typeName"/>
        <collection property="chunks" ofType="org.xiaoshuyui.simplekb.entity.KbFileChunk">
            <id column="chunk_id" property="id"/>
            <result column="chunk_content" property="content"/>
        </collection>
    </resultMap>




    <resultMap id="FileBasic" type="org.xiaoshuyui.simplekb.entity.KbFile">
        <id column="kb_file_id" property="id"/>
        <result property="name" column="kb_file_name"/>
        <result property="typeName" column="type_name"/>
    </resultMap>


    <!-- Step 1: 根据 chunkIds 查询对应的文件ID -->
    <select id="getFileIdsByChunkIds" resultType="java.lang.Long">
        SELECT DISTINCT c.file_id
        FROM kb_file_chunk c
        WHERE c.chunk_id IN
        <foreach item="id" collection="chunkIds" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND c.is_deleted = 0
    </select>

    <select id="getFileBasicInfo" resultMap="FileBasic">
        SELECT
            f.kb_file_id,
            f.kb_file_name,
            t.type_name
        FROM kb_file f
                 LEFT JOIN kb_file_type t ON f.kb_file_type = t.type_id
        WHERE f.is_deleted = 0
        AND f.kb_file_id IN
        <foreach item="id" collection="fileIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <resultMap id="FileChunksResultMap" type="org.xiaoshuyui.simplekb.entity.KbFileChunk">
        <id column="chunk_id" property="id"/>
        <result property="content" column="chunk_content"/>
        <result property="fileId" column="file_id"/>
    </resultMap>

    <select id="getFileChunksByFileIdsAndChunkIds" resultMap="FileChunksResultMap">
        SELECT
        c.chunk_id,
        c.chunk_content,
        c.file_id
        FROM kb_file_chunk c
        WHERE c.file_id IN
        <foreach item="id" collection="fileIds" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND c.is_deleted = 0
        AND c.chunk_id IN
        <foreach item="id" collection="chunkIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>